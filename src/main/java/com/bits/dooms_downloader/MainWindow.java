package com.bits.dooms_downloader;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.*;
import java.io.File;
import javax.swing.JFileChooser;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
/**
 *
 * @author DoomDevil
 */
public class MainWindow extends javax.swing.JFrame implements PropertyChangeListener{

    private final YouTube objYT = new YouTube();
    private Youtube_Post_Request obj_YTPR;
    private boolean cb_Enable = true;
    private String primaryData = "";
    private DefaultComboBoxModel obj_VideoDCBM = new DefaultComboBoxModel();
    private DefaultComboBoxModel obj_AudioDCBM = new DefaultComboBoxModel();
    //private TaskManager objTaskManager = new TaskManager(taskInfoLabel);
    private TaskManager objTaskManager;
    private TextOverlayProgressBar pbDownload;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        jpLink = new javax.swing.JPanel();
        lblLink = new javax.swing.JLabel();
        jpSearch = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        jpUrl = new javax.swing.JPanel();
        txtUrl = new javax.swing.JTextField();
        jpTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jpOptions = new javax.swing.JPanel();
        cbVideoOpt = new javax.swing.JComboBox<>();
        ckbAudio = new javax.swing.JCheckBox();
        cbAudioOpt = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        lblSave = new javax.swing.JLabel();
        txtSaveName = new javax.swing.JTextField();
        lblDirectory = new javax.swing.JLabel();
        txtDirectory = new javax.swing.JTextField();
        btnDirectory = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        jpDescarga = new javax.swing.JPanel();
        //pbDownload = new javax.swing.JProgressBar();
        pbDownload = new TextOverlayProgressBar();
        taskInfoLabel = new javax.swing.JLabel();
        jpDatos = new javax.swing.JPanel();
        txtData = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dooms Downloader");
        setMinimumSize(new java.awt.Dimension(800, 750));
        setName("frameMainWindow"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 768));
        setSize(new java.awt.Dimension(1024, 768));

        jpHeader.setMinimumSize(new java.awt.Dimension(800, 50));

        lblHeader.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        lblHeader.setText("Doomdevil's Downloader");

        javax.swing.GroupLayout jpHeaderLayout = new javax.swing.GroupLayout(jpHeader);
        jpHeader.setLayout(jpHeaderLayout);
        jpHeaderLayout.setHorizontalGroup(
            jpHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpHeaderLayout.setVerticalGroup(
            jpHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpLink.setMaximumSize(new java.awt.Dimension(80, 50));
        jpLink.setMinimumSize(new java.awt.Dimension(80, 50));
        jpLink.setPreferredSize(new java.awt.Dimension(80, 50));

        lblLink.setFont(new java.awt.Font("Arial Black", 0, 20)); // NOI18N
        lblLink.setText("Link");
        lblLink.setFocusable(false);
        lblLink.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jpLinkLayout = new javax.swing.GroupLayout(jpLink);
        jpLink.setLayout(jpLinkLayout);
        jpLinkLayout.setHorizontalGroup(
            jpLinkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLinkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLink, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpLinkLayout.setVerticalGroup(
            jpLinkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLinkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSearch.setText("Buscar");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpSearchLayout = new javax.swing.GroupLayout(jpSearch);
        jpSearch.setLayout(jpSearchLayout);
        jpSearchLayout.setHorizontalGroup(
            jpSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSearchLayout.createSequentialGroup()
                .addComponent(btnSearch)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        jpSearchLayout.setVerticalGroup(
            jpSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpUrl.setMinimumSize(new java.awt.Dimension(500, 50));

        txtUrl.setBackground(new java.awt.Color(242, 242, 242));
        txtUrl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtUrl.setToolTipText("Ingresa el link del video");
        txtUrl.setActionCommand("<Not Set>");
        txtUrl.setMinimumSize(new java.awt.Dimension(500, 50));
        txtUrl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUrlFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jpUrlLayout = new javax.swing.GroupLayout(jpUrl);
        jpUrl.setLayout(jpUrlLayout);
        jpUrlLayout.setHorizontalGroup(
            jpUrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jpUrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpUrlLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 1251, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jpUrlLayout.setVerticalGroup(
            jpUrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
            .addGroup(jpUrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpUrlLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtUrl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jpTitle.setMinimumSize(new java.awt.Dimension(400, 50));

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        lblTitle.setMinimumSize(new java.awt.Dimension(500, 0));
        lblTitle.setName(""); // NOI18N

        javax.swing.GroupLayout jpTitleLayout = new javax.swing.GroupLayout(jpTitle);
        jpTitle.setLayout(jpTitleLayout);
        jpTitleLayout.setHorizontalGroup(
            jpTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpTitleLayout.setVerticalGroup(
            jpTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblTitle.getAccessibleContext().setAccessibleName("lblTitle");

        jpOptions.setAutoscrolls(isResizable());
        jpOptions.setMinimumSize(new java.awt.Dimension(300, 250));

        cbVideoOpt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbVideoOpt.setEnabled(false);
        cbVideoOpt.setMaximumSize(new java.awt.Dimension(288, 30));
        cbVideoOpt.setMinimumSize(new java.awt.Dimension(288, 20));
        cbVideoOpt.setPreferredSize(new java.awt.Dimension(288, 30));
        cbVideoOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVideoOptActionPerformed(evt);
            }
        });

        ckbAudio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ckbAudio.setText("Agregar Audio");
        ckbAudio.setEnabled(false);
        ckbAudio.setMaximumSize(new java.awt.Dimension(288, 30));
        ckbAudio.setMinimumSize(new java.awt.Dimension(288, 20));
        ckbAudio.setPreferredSize(new java.awt.Dimension(288, 30));
        ckbAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbAudioActionPerformed(evt);
            }
        });

        cbAudioOpt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbAudioOpt.setEnabled(false);
        cbAudioOpt.setMaximumSize(new java.awt.Dimension(288, 30));
        cbAudioOpt.setMinimumSize(new java.awt.Dimension(288, 20));
        cbAudioOpt.setPreferredSize(new java.awt.Dimension(288, 30));
        cbAudioOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAudioOptActionPerformed(evt);
            }
        });

        lblSave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSave.setText("Guardar como");
        lblSave.setMaximumSize(new java.awt.Dimension(288, 30));
        lblSave.setMinimumSize(new java.awt.Dimension(288, 20));
        lblSave.setPreferredSize(new java.awt.Dimension(288, 30));

        txtSaveName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSaveName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtSaveName.setEnabled(false);

        lblDirectory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDirectory.setText("Guardar en");
        lblDirectory.setMaximumSize(new java.awt.Dimension(288, 30));
        lblDirectory.setMinimumSize(new java.awt.Dimension(288, 20));
        lblDirectory.setPreferredSize(new java.awt.Dimension(288, 30));

        txtDirectory.setEditable(false);
        txtDirectory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDirectory.setEnabled(false);
        txtDirectory.setMaximumSize(new java.awt.Dimension(288, 30));
        txtDirectory.setMinimumSize(new java.awt.Dimension(288, 20));
        txtDirectory.setPreferredSize(new java.awt.Dimension(288, 30));

        btnDirectory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDirectory.setText("Elegir Carpeta");
        btnDirectory.setEnabled(false);
        btnDirectory.setMaximumSize(new java.awt.Dimension(288, 30));
        btnDirectory.setMinimumSize(new java.awt.Dimension(288, 20));
        btnDirectory.setPreferredSize(new java.awt.Dimension(288, 30));
        btnDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectoryActionPerformed(evt);
            }
        });

        btnDownload.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDownload.setText("Descargar");
        btnDownload.setEnabled(false);
        btnDownload.setMaximumSize(new java.awt.Dimension(288, 50));
        btnDownload.setMinimumSize(new java.awt.Dimension(288, 30));
        btnDownload.setPreferredSize(new java.awt.Dimension(288, 50));
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpOptionsLayout = new javax.swing.GroupLayout(jpOptions);
        jpOptions.setLayout(jpOptionsLayout);
        jpOptionsLayout.setHorizontalGroup(
            jpOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckbAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbAudioOpt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(lblSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSaveName)
                    .addComponent(lblDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbVideoOpt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpOptionsLayout.setVerticalGroup(
            jpOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbVideoOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckbAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAudioOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSaveName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        taskInfoLabel.setText("Sin descargas pendientes");
        objTaskManager = new TaskManager(taskInfoLabel);

        javax.swing.GroupLayout jpDescargaLayout = new javax.swing.GroupLayout(jpDescarga);
        jpDescarga.setLayout(jpDescargaLayout);
        jpDescargaLayout.setHorizontalGroup(
            jpDescargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescargaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDescargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbDownload, javax.swing.GroupLayout.DEFAULT_SIZE, 1507, Short.MAX_VALUE)
                    .addGroup(jpDescargaLayout.createSequentialGroup()
                        .addComponent(taskInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpDescargaLayout.setVerticalGroup(
            jpDescargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescargaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbDownload, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpDatos.setMinimumSize(new java.awt.Dimension(100, 100));

        txtData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtData.setMinimumSize(new java.awt.Dimension(100, 100));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        txtData.setViewportView(jTextArea1);

        javax.swing.GroupLayout jpDatosLayout = new javax.swing.GroupLayout(jpDatos);
        jpDatos.setLayout(jpDatosLayout);
        jpDatosLayout.setHorizontalGroup(
            jpDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, 1195, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpDatosLayout.setVerticalGroup(
            jpDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jpLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpUrl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jpSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jpOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jpDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jpDescarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpUrl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpLink, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jpDescarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        // IN THIS METHOD WE VALIDATE THE URL GIVEN BY THE USER. IF EVERYTHING IS RIGHT WE GET THE RESPONSE FROM YT API AND FILL THE FIELDS UP
        
        obj_AudioDCBM.addElement(new ComboItems("",""));
        obj_VideoDCBM.addElement(new ComboItems("",""));
        
        if (objYT.url_Validate(txtUrl.getText()) && objYT.get_VideoID(txtUrl.getText()) != null) {

            obj_YTPR = new Youtube_Post_Request(objYT.get_VideoID(txtUrl.getText()));
            //JsonNode node_old=null;
            JSONObject node = null;
            //ARRAYS FOR FORMAT AND ADAPTIVE FORMAT
            JSONArray jsonA_LinksF = null, jsonA_LinksAF = null;
            String src = obj_YTPR.getResponse();

            try {
                //node = JsonP.parse(src);
                node = new JSONObject(src);
            }
            catch (JSONException e){
                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
            }

            if(node.getJSONObject("playabilityStatus").getString("status").equalsIgnoreCase("ok")){
                enable_Components();
                
                //FILLING VIDEO AND AUDIO COMBOBOX UP
                comboFillUp(combineJSONArrays(node.getJSONObject("streamingData").getJSONArray("formats"), node.getJSONObject("streamingData").getJSONArray("adaptiveFormats")));
                                
                cbVideoOpt.setModel(obj_VideoDCBM);
                cbAudioOpt.setModel(obj_AudioDCBM);
                lblTitle.setText(node.getJSONObject("videoDetails").getString("title"));
                txtSaveName.setText(node.getJSONObject("videoDetails").getString("title"));
            }
            else if(node.getJSONObject("playabilityStatus").getString("status").equalsIgnoreCase("error"))
                JOptionPane.showMessageDialog(null, "Error en la URL.\nEl video del link no está disponible.\nLink: "+txtUrl.getText(), "Link Caido", JOptionPane.ERROR_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(null, "El link ingresado no es válido.\nLink: "+ txtUrl.getText(), "Link Inválido!", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnSearchMouseClicked

    private void txtUrlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUrlFocusGained
        txtUrl.setText("");
        clean_Components();
        clean_TextArea();
    }//GEN-LAST:event_txtUrlFocusGained

    private void cbVideoOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVideoOptActionPerformed
        if(cb_Enable){
            clean_TextArea();
            primaryData="";
            cb_Enable=false;
            cbAudioOpt.setSelectedIndex(0);
            cb_Enable=true;
            Object item = cbVideoOpt.getSelectedItem();
            String itag = ((ComboItems) item).getValue();

            //JsonNode node = null;
            JSONObject node = null;
            //ARRAYS FOR FORMAT AND ADAPTIVE FORMAT
            JSONArray jsonA_LinksF = null, jsonA_LinksAF = null;
            String src = obj_YTPR.getResponse();

            try {
                node = new JSONObject(src);
            } catch (JSONException e) {
                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
            }

            textAreaFillUp(combineJSONArrays(node.getJSONObject("streamingData").getJSONArray("formats"), node.getJSONObject("streamingData").getJSONArray("adaptiveFormats")), itag);
            primaryData=jTextArea1.getText();
        }
    }//GEN-LAST:event_cbVideoOptActionPerformed

    private void ckbAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbAudioActionPerformed
        if(ckbAudio.isSelected()) {
            cbAudioOpt.setEnabled(true);
        }
        else {
            cbAudioOpt.setEnabled(false);
            cbAudioOpt.setSelectedIndex(0);
        }
    }//GEN-LAST:event_ckbAudioActionPerformed

    private void cbAudioOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAudioOptActionPerformed
        if(cb_Enable){
            jTextArea1.setText("");
            jTextArea1.setText(primaryData);
            jTextArea1.append("\n\n********************\n\n");
            Object item = cbAudioOpt.getSelectedItem();
            String itag = ((ComboItems) item).getValue();
            JSONObject node = null;
            String src = obj_YTPR.getResponse();
            JSONArray jsonA_LinksAF = null;

            try {
                node = new JSONObject(src);
            } catch (JSONException e) {
                JOptionPane.showMessageDialog(null, "Error", e.toString(), JOptionPane.ERROR_MESSAGE);
            }

            textAreaFillUp(node.getJSONObject("streamingData").getJSONArray("adaptiveFormats"), itag);
        }
    }//GEN-LAST:event_cbAudioOptActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        if(txtDirectory.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Por favor elija un directorio donde guardar el archivo!", "Error", JOptionPane.ERROR_MESSAGE);
        else if(cbVideoOpt.getSelectedIndex()==0)
            JOptionPane.showMessageDialog(null, "Por favor elija una opción para descargar valida", "Error", JOptionPane.ERROR_MESSAGE);
        else if(ckbAudio.isSelected() && cbAudioOpt.getSelectedIndex()==0)
            JOptionPane.showMessageDialog(null, "La opción de agregar audio está activa pero\nno se ha seleccionado ningún archivo de audio.\nPor favor elija un archivo de audio o desactive la opción de agregar audio.", "Error", JOptionPane.ERROR_MESSAGE);
        else{
            String url="";
            String extension="";
            Object item = cbVideoOpt.getSelectedItem();
            Object itemAudio = cbAudioOpt.getSelectedItem();
            String itag = ((ComboItems) item).getValue();
            String itagAudio = ((ComboItems) itemAudio).getValue();
            String src = obj_YTPR.getResponse();
            
            try{
                JSONObject node = new JSONObject(src);
                JSONArray jsonA_LinksF = node.getJSONObject("streamingData").getJSONArray("formats");
                JSONArray jsonA_LinksAF = node.getJSONObject("streamingData").getJSONArray("adaptiveFormats");
                
                for(int i=0; i<jsonA_LinksF.length(); i++){
                    JSONObject link = jsonA_LinksF.getJSONObject(i);
                    if(String.valueOf(link.getInt("itag")).equals(itag)){
                        url = link.getString("url");
                        extension = "."+link.getString("mimeType").substring(link.getString("mimeType").indexOf("/")+1, link.getString("mimeType").indexOf(";"));
                    }
                }
                for(int i=0; i<jsonA_LinksAF.length(); i++){
                    JSONObject link = jsonA_LinksAF.getJSONObject(i);
                    if(String.valueOf(link.getInt("itag")).equals(itag)){
                        url = link.getString("url");
                        if(link.getString("mimeType").contains("audio"))
                            extension = ".mp3";
                        else
                            extension = "."+link.getString("mimeType").substring(link.getString("mimeType").indexOf("/")+1, link.getString("mimeType").indexOf(";"));
                    }
                }
                //NOW WE DOWNLOAD THE FILE
                pbDownload.setValue(0);
                
                DownloadTask objDownloadTask = new DownloadTask(url, txtDirectory.getText()+"\\"+txtSaveName.getText()+extension, pbDownload, txtSaveName+extension);
                objDownloadTask.addPropertyChangeListener(this);
                objTaskManager.addTask(objDownloadTask);
                
                //IF WE ARE DOWNLOADING ADAPTIVE FORMATS AND WANT THE AUDIO, IT IS VALIDATE IN THIS IF
                if(ckbAudio.isSelected()){
                    for(int i=0; i<jsonA_LinksAF.length(); i++){
                        JSONObject link = jsonA_LinksAF.getJSONObject(i);
                        if(String.valueOf(link.getInt("itag")).equals(itagAudio)){
                            url = link.getString("url");
                            extension = ".mp3";
                        }
                    }
                    pbDownload.setValue(0);
                
                    objDownloadTask = new DownloadTask(url, txtDirectory.getText()+"\\"+txtSaveName.getText()+"-AUDIO"+extension, pbDownload, txtSaveName.getText()+"-AUDIO"+extension);
                    objDownloadTask.addPropertyChangeListener(this);
                    objTaskManager.addTask(objDownloadTask);
                }
            }
            catch(JSONException e){
                JOptionPane.showMessageDialog(null, "Error", e.toString(), JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectoryActionPerformed
        JFileChooser obj_JFileChooser = new JFileChooser();
        obj_JFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = obj_JFileChooser.showOpenDialog(this);
        if(option == JFileChooser.APPROVE_OPTION){
            File file = obj_JFileChooser.getSelectedFile();
            txtDirectory.setText(file.getAbsolutePath());
            txtDirectory.setToolTipText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_btnDirectoryActionPerformed

    private void comboFillUp(JSONArray jsonArray){
        
        for(int i=0; i<jsonArray.length(); i++){
            JSONObject link = jsonArray.getJSONObject(i);
            if(link.getString("mimeType").contains("video"))
                obj_VideoDCBM.addElement(new ComboItems(link.getString("qualityLabel")+"-"+link.getString("mimeType").substring(0,link.getString("mimeType").indexOf(";")), String.valueOf(link.getInt("itag"))));
            else{
                obj_AudioDCBM.addElement(new ComboItems(link.getString("quality")+"-"+link.getString("mimeType").substring(0,link.getString("mimeType").indexOf(";")), String.valueOf(link.getInt("itag"))));
                obj_VideoDCBM.addElement(new ComboItems(link.getString("quality")+"-"+link.getString("mimeType").substring(0,link.getString("mimeType").indexOf(";")), String.valueOf(link.getInt("itag"))));
            }
        }
    }
    
    private void textAreaFillUp(JSONArray jsonArray, String itag){
        for (int i = 0; i < jsonArray.length(); i++){
            JSONObject link = jsonArray.getJSONObject(i);
            if (String.valueOf(link.getInt("itag")).equalsIgnoreCase(itag)) {
                jTextArea1.append("Formato: " + link.getString("mimeType").replaceAll(";\sc","\nC") + "\n");
                if(link.getString("mimeType").contains("video")){
                    jTextArea1.append("Ancho del fotograma: " + link.getInt("width") + "\n");
                    jTextArea1.append("Alto del fotograma: " + link.getInt("height") + "\n");
                    jTextArea1.append("Calidad: " + link.getString("quality") + "\n");
                    jTextArea1.append("Fps: " + link.getInt("fps") + "\n");
                    jTextArea1.append("Duración: " + objYT.get_MediaDuration(Integer.parseInt(link.getString("approxDurationMs"))) + "\n\n");
                    if(link.getString("mimeType").contains(",")){
                        jTextArea1.append(("Configuración: Audio y video"));
                        ckbAudio.setSelected(false);
                        ckbAudio.setEnabled(false);
                        cbAudioOpt.setEnabled(false);
                    }
                    else{
                        jTextArea1.append(("Configuración: Sólo video"));
                        ckbAudio.setEnabled(true);
                        if(ckbAudio.isSelected())
                            cbAudioOpt.setEnabled(true);
                        else
                            cbAudioOpt.setEnabled(false);
                    }
                }
                else{
                    jTextArea1.append("Bit rate: " + String.valueOf(link.getInt("bitrate") / 1000) + "kbps\n");
                    jTextArea1.append("Calidad: " + link.getString("audioQuality") + "\n");
                    jTextArea1.append("Duración: " + objYT.get_MediaDuration(Integer.parseInt(link.getString("approxDurationMs"))) + "\n\n");
                    jTextArea1.append(("Configuración: Sólo audio"));
                    if(!cbAudioOpt.isEnabled()){
                        ckbAudio.setSelected(false);
                        ckbAudio.setEnabled(false);
                        cbAudioOpt.setEnabled(false);
                    }
                }
                return;
            }
        }
    }
    
    private static JSONArray combineJSONArrays(JSONArray jsonArray1, JSONArray jsonArray2){
        JSONArray combinedArray = new JSONArray();
        
        for(int i = 0; i < jsonArray1.length(); i++)
            combinedArray.put(jsonArray1.get(i));
        for(int i = 0; i < jsonArray2.length(); i++)
            combinedArray.put(jsonArray2.get(i));
        return combinedArray;
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("progress")) {
            int progress = (Integer) evt.getNewValue();
            pbDownload.setValue(progress);
        }
    }
    
    private void enable_Components(){
        lblTitle.setText("");
        lblSave.setEnabled(true);
        cbVideoOpt.setEnabled(true);
        txtSaveName.setEnabled(true);
        lblDirectory.setEnabled(true);
        txtDirectory.setEnabled(true);
        btnDirectory.setEnabled(true);
        btnDownload.setEnabled(true);
    }
    
    private void clean_Components(){
        cb_Enable = false;
        cbVideoOpt.removeAllItems();
        cbVideoOpt.setEnabled(false);
        ckbAudio.setSelected(false);
        ckbAudio.setEnabled(false);
        cbAudioOpt.removeAllItems();
        cbAudioOpt.setEnabled(false);
        lblSave.setEnabled(false);
        txtSaveName.setText("");
        txtSaveName.setEnabled(false);
        lblDirectory.setEnabled(false);
        txtDirectory.setText("");
        txtDirectory.setEnabled(false);
        btnDirectory.setEnabled(false);
        btnDownload.setEnabled(false);
        lblTitle.setText("");
        clean_TextArea();
        cb_Enable=true;
    }
    
    private void clean_TextArea(){
        jTextArea1.selectAll();
        jTextArea1.replaceSelection("");
    }
    /**
     * 
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try{
            UIManager.setLookAndFeel(new FlatDarkFlatIJTheme());
        }
        catch(Exception e){
            e.printStackTrace();
        }*/
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDirectory;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbAudioOpt;
    private javax.swing.JComboBox<String> cbVideoOpt;
    private javax.swing.JCheckBox ckbAudio;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel jpDatos;
    private javax.swing.JPanel jpDescarga;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpLink;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JPanel jpSearch;
    private javax.swing.JPanel jpTitle;
    private javax.swing.JPanel jpUrl;
    private javax.swing.JLabel lblDirectory;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblLink;
    private javax.swing.JLabel lblSave;
    private javax.swing.JLabel lblTitle;
    //private javax.swing.JProgressBar pbDownload;
    private javax.swing.JLabel taskInfoLabel;
    private javax.swing.JScrollPane txtData;
    private javax.swing.JTextField txtDirectory;
    private javax.swing.JTextField txtSaveName;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
}
